{"version":3,"sources":["types/ErrorType.ts","types/Loading.ts","components/PostsList.tsx","utils/fetchClient.ts","components/CommentsList.tsx","api/comments.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","api/users.ts","api/posts.ts","index.tsx"],"names":["ErrorType","Loading","PostsList","posts","setSelectedPost","selectedPost","className","map","post","id","title","type","onClick","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","statusText","json","catch","error","message","client","CommentsList","comments","setComments","useState","hasDeletingError","setDeletingError","deletingId","setDeletingId","handleDelete","commentId","a","current","filter","comment","href","name","Loader","NewCommentForm","defaultComment","email","postId","defaultFormError","submittingError","commentData","setCommentData","isSubmiting","setSubmiting","formErrors","setFormError","handleChange","event","prev","target","value","addComment","newComment","onSubmit","hasError","preventDefault","htmlFor","placeholder","cn","onChange","PostDetails","isLoading","isFormOpen","setFormOpen","hasNoComments","length","Comments","CommentsLoading","UserSelector","users","selectedUser","onSelect","dropdownOpen","setDropdownOpen","role","user","App","setUsers","setSelectedUser","None","setError","setLoading","setPosts","useEffect","loadPosts","Posts","userId","loadedPosts","PostsLoading","loadComments","loadedComments","hasNoPosts","classNames","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ec21a29e.chunk.js","sourcesContent":["export enum ErrorType {\n  None,\n  PostsLoading,\n  CommentsLoading,\n  CommentAdding,\n}\n","export enum Loading {\n  None,\n  Posts,\n  Comments,\n}\n","import React, { Dispatch, SetStateAction } from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  selectedPost: Post | null;\n  setSelectedPost: Dispatch<SetStateAction<Post | null>>\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  setSelectedPost,\n  selectedPost,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(post => (\n          <tr\n            key={post.id}\n            data-cy=\"Post\"\n          >\n            <td data-cy=\"PostId\">{post.id}</td>\n\n            <td data-cy=\"PostTitle\">\n              {post.title}\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              {selectedPost?.id === post.id ? (\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className=\"button is-link\"\n                  onClick={() => setSelectedPost(null)}\n                >\n                  Close\n                </button>\n              ) : (\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className=\"button is-link is-light\"\n                  onClick={() => setSelectedPost(post)}\n                >\n                  Open\n                </button>\n              )}\n\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: unknown = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n\n      return response.json();\n    })\n    .catch(error => {\n      throw new Error(error.message);\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: unknown) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: unknown) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { Dispatch, SetStateAction, useState } from 'react';\nimport { deleteComment } from '../api/comments';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  comments: Comment[];\n  setComments:Dispatch<SetStateAction<Comment[]>>\n};\n\nexport const CommentsList:React.FC<Props> = ({\n  comments,\n  setComments,\n}) => {\n  const [hasDeletingError, setDeletingError] = useState(false);\n  const [deletingId, setDeletingId] = useState(0);\n\n  const handleDelete = async (commentId: number) => {\n    try {\n      setDeletingId(commentId);\n      await deleteComment(commentId);\n\n      setComments(current => current.filter(\n        ({ id }) => id !== commentId,\n      ));\n    } catch {\n      setDeletingError(true);\n    }\n  };\n\n  return (\n    <>\n      <p className=\"title is-4\">Comments:</p>\n      {comments.map(comment => (\n        <article\n          key={comment.id}\n          className=\"message is-small\"\n          data-cy=\"Comment\"\n        >\n          <div className=\"message-header\">\n            <a href=\"mailto:misha@mate.academy\" data-cy=\"CommentAuthor\">\n              {comment.name}\n            </a>\n            <button\n              data-cy=\"CommentDelete\"\n              type=\"button\"\n              className=\"delete is-small\"\n              aria-label=\"delete\"\n              onClick={() => handleDelete(comment.id)}\n            >\n              delete button\n            </button>\n          </div>\n          <div className=\"message-body\" data-cy=\"CommentBody\">\n            {comment.body}\n          </div>\n\n          {hasDeletingError && deletingId === comment.id && (\n            <div\n              className=\"notification is-danger\"\n            >\n              Something went wrong!\n            </div>\n          )}\n        </article>\n      ))}\n    </>\n  );\n};\n","import { Comment, CommentData } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n\nexport const postComment = (data: CommentData) => {\n  return client.post<Comment>('/comments', data);\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable react/button-has-type */\nimport cn from 'classnames';\nimport React, { Dispatch, SetStateAction, useState } from 'react';\nimport { postComment } from '../api/comments';\nimport { Comment, CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  setComments: Dispatch<SetStateAction<Comment[]>>\n  selectedPost: Post | null\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  setComments,\n  selectedPost,\n}) => {\n  const defaultComment = {\n    name: '',\n    email: '',\n    body: '',\n    postId: selectedPost?.id,\n  };\n  const defaultFormError = {\n    name: false,\n    email: false,\n    body: false,\n    submittingError: false,\n  };\n\n  const [commentData, setCommentData] = useState<CommentData>(defaultComment);\n  const [isSubmiting, setSubmiting] = useState(false);\n  const [formErrors, setFormError] = useState(defaultFormError);\n  const { name, email, body } = commentData;\n\n  const handleChange = (\n    event: React.ChangeEvent<HTMLInputElement\n    | HTMLTextAreaElement>,\n  ) => {\n    setCommentData(prev => ({\n      ...prev,\n      [event.target.name]: event.target.value,\n    }));\n\n    setFormError(prev => ({\n      ...prev,\n      [event.target.name]: false,\n    }));\n  };\n\n  const addComment = async () => {\n    setSubmiting(true);\n    try {\n      const newComment = await postComment(commentData);\n\n      setComments(prev => [...prev, newComment]);\n    } catch {\n      setFormError(prev => ({\n        ...prev,\n        submittingError: true,\n      }));\n    } finally {\n      setSubmiting(false);\n    }\n  };\n\n  const handleSubmit = (event:React.FormEvent<HTMLFormElement>) => {\n    let hasError = false;\n\n    event.preventDefault();\n    if (!name) {\n      setFormError(prev => ({ ...prev, name: true }));\n      hasError = true;\n    }\n\n    if (!email) {\n      setFormError(prev => ({ ...prev, email: true }));\n      hasError = true;\n    }\n\n    if (!body) {\n      setFormError(prev => ({ ...prev, body: true }));\n      hasError = true;\n    }\n\n    if (hasError) {\n      setSubmiting(false);\n\n      return;\n    }\n\n    addComment();\n    setCommentData(prev => ({ ...prev, body: '' }));\n  };\n\n  const handleClear = () => {\n    setCommentData(defaultComment);\n    setFormError(defaultFormError);\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', {\n              'is-danger': formErrors.name,\n            })}\n            value={name}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {formErrors.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {formErrors.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', {\n              'is-danger': formErrors.email,\n            })}\n            value={email}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {formErrors.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {formErrors.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn('textarea', {\n              'is-danger': formErrors.body,\n            })}\n            value={body}\n            onChange={handleChange}\n          />\n        </div>\n\n        {formErrors.body && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn('button is-link',\n              { 'is-loading': isSubmiting })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n      {formErrors.submittingError && (\n        <div\n          className=\"notification is-danger\"\n          data-cy=\"CommentsError\"\n        >\n          Something went wrong\n        </div>\n      )}\n\n    </form>\n\n  );\n};\n","import React, { Dispatch, SetStateAction } from 'react';\nimport { Comment } from '../types/Comment';\nimport { ErrorType } from '../types/ErrorType';\nimport { Loading } from '../types/Loading';\nimport { Post } from '../types/Post';\nimport { CommentsList } from './CommentsList';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  selectedPost: Post | null;\n  error: ErrorType;\n  isLoading: Loading;\n  comments: Comment[];\n  setComments:Dispatch<SetStateAction<Comment[]>>\n  isFormOpen: boolean;\n  setFormOpen:Dispatch<SetStateAction<boolean>>\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  error,\n  isLoading,\n  comments,\n  setComments,\n  isFormOpen,\n  setFormOpen,\n}) => {\n  const hasNoComments = !comments.length\n  && selectedPost\n  && !error\n  && !isLoading;\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {selectedPost?.title}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading === Loading.Comments && (\n            <Loader />\n          )}\n\n          {error === ErrorType.CommentsLoading && (\n            <div\n              className=\"notification is-danger\"\n              data-cy=\"CommentsError\"\n            >\n              Something went wrong\n            </div>\n          )}\n\n          {hasNoComments && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          ) }\n\n          {selectedPost && comments.length > 0 && (\n            <CommentsList\n              comments={comments}\n              setComments={setComments}\n            />\n          )}\n\n          {isFormOpen ? (\n            <NewCommentForm\n              setComments={setComments}\n              selectedPost={selectedPost}\n            />\n          ) : (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setFormOpen(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n      </div>\n    </div>\n  );\n};\n","import cn from 'classnames';\nimport React, {\n  useState,\n} from 'react';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  onSelect: (user: User) => void\n  selectedUser: User | null;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  onSelect,\n}) => {\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={cn('dropdown', {\n        'is-active': dropdownOpen,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setDropdownOpen(!dropdownOpen)}\n        >\n          <span>\n            {selectedUser\n              ? selectedUser.name\n              : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className=\"dropdown-item\"\n              onClick={() => {\n                onSelect(user);\n                setDropdownOpen(false);\n              }}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable no-console */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getUsers } from './api/users';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { getPosts } from './api/posts';\nimport { ErrorType } from './types/ErrorType';\nimport { Loading } from './types/Loading';\nimport { Comment } from './types/Comment';\nimport { getComments } from './api/comments';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [error, setError] = useState(ErrorType.None);\n  const [isLoading, setLoading] = useState(Loading.None);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isFormOpen, setFormOpen] = useState(false);\n\n  useEffect(() => {\n    getUsers()\n      .then(response => setUsers(response));\n  }, []);\n\n  const loadPosts = async () => {\n    if (selectedUser) {\n      setLoading(Loading.Posts);\n      try {\n        const loadedPosts = await getPosts(selectedUser.id);\n\n        setPosts(loadedPosts);\n      } catch (err) {\n        setError(ErrorType.PostsLoading);\n      } finally {\n        setLoading(Loading.None);\n      }\n    }\n  };\n\n  useEffect(() => {\n    loadPosts();\n  }, [selectedUser]);\n\n  const loadComments = async () => {\n    if (selectedPost) {\n      setLoading(Loading.Comments);\n      try {\n        const loadedComments = await getComments(selectedPost.id);\n\n        setComments(loadedComments);\n      } catch (err) {\n        setError(ErrorType.CommentsLoading);\n      } finally {\n        setLoading(Loading.None);\n      }\n    }\n  };\n\n  useEffect(() => {\n    loadComments();\n  }, [selectedPost]);\n\n  const handleSelectUser = (user: User) => {\n    setSelectedUser(user);\n    setSelectedPost(null);\n  };\n\n  useEffect(() => {\n    setFormOpen(false);\n  }, [selectedPost, selectedUser]);\n\n  const hasNoPosts = !posts.length\n  && selectedUser\n  && !error\n  && !isLoading;\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  onSelect={handleSelectUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading === Loading.Posts && <Loader />}\n\n                {hasNoPosts && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {error === ErrorType.PostsLoading && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {selectedUser && posts.length > 0 && (\n                  <PostsList\n                    posts={posts}\n                    setSelectedPost={setSelectedPost}\n                    selectedPost={selectedPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              <PostDetails\n                selectedPost={selectedPost}\n                error={error}\n                isLoading={isLoading}\n                comments={comments}\n                setComments={setComments}\n                isFormOpen={isFormOpen}\n                setFormOpen={setFormOpen}\n              />\n            </div>\n          </div>\n\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}