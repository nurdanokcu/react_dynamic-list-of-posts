{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","utils/fetchClient.ts","types/ErrorType.ts","App.tsx","api/users.ts","api/posts.ts","index.tsx"],"names":["PostsList","posts","className","map","post","id","title","type","Loader","NewCommentForm","htmlFor","name","placeholder","PostDetails","href","UserSelector","users","selectedUser","setSelectedUser","useState","dropdownOpen","setDropdownOpen","cn","onClick","role","user","handleSelectUser","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","statusText","json","catch","error","message","ErrorType","client","App","setUsers","None","setError","isLoading","setLoading","setPosts","useEffect","getUsers","loadPosts","a","userId","loadedPosts","PostsLoading","hasNoPosts","length","classNames","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.667e238f.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[]\n};\n\nexport const PostsList: React.FC<Props> = ({ posts }) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(post => (\n          <tr\n            key={post.id}\n            data-cy=\"Post\"\n          >\n            <td data-cy=\"PostId\">{post.id}</td>\n\n            <td data-cy=\"PostTitle\">\n              {post.title}\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                type=\"button\"\n                data-cy=\"PostButton\"\n                className=\"button is-link is-light\"\n              >\n                Open\n              </button>\n              <button\n                type=\"button\"\n                data-cy=\"PostButton\"\n                className=\"button is-link\"\n              >\n                Close\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\n\nexport const NewCommentForm: React.FC = () => {\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className=\"input is-danger\"\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          <span\n            className=\"icon is-small is-right has-text-danger\"\n            data-cy=\"ErrorIcon\"\n          >\n            <i className=\"fas fa-exclamation-triangle\" />\n          </span>\n        </div>\n\n        <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n          Name is required\n        </p>\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className=\"input is-danger\"\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          <span\n            className=\"icon is-small is-right has-text-danger\"\n            data-cy=\"ErrorIcon\"\n          >\n            <i className=\"fas fa-exclamation-triangle\" />\n          </span>\n        </div>\n\n        <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n          Email is required\n        </p>\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className=\"textarea is-danger\"\n          />\n        </div>\n\n        <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n          Enter some text\n        </p>\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button type=\"submit\" className=\"button is-link is-loading\">\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\nexport const PostDetails: React.FC = () => {\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            #18: voluptate et itaque vero tempora molestiae\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            eveniet quo quis\n            laborum totam consequatur non dolor\n            ut et est repudiandae\n            est voluptatem vel debitis et magnam\n          </p>\n        </div>\n\n        <div className=\"block\">\n          <Loader />\n\n          <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n            Something went wrong\n          </div>\n\n          <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n            No comments yet\n          </p>\n\n          <p className=\"title is-4\">Comments:</p>\n\n          <article className=\"message is-small\" data-cy=\"Comment\">\n            <div className=\"message-header\">\n              <a href=\"mailto:misha@mate.academy\" data-cy=\"CommentAuthor\">\n                Misha Hrynko\n              </a>\n              <button\n                data-cy=\"CommentDelete\"\n                type=\"button\"\n                className=\"delete is-small\"\n                aria-label=\"delete\"\n              >\n                delete button\n              </button>\n            </div>\n\n            <div className=\"message-body\" data-cy=\"CommentBody\">\n              Some comment\n            </div>\n          </article>\n\n          <article className=\"message is-small\" data-cy=\"Comment\">\n            <div className=\"message-header\">\n              <a\n                href=\"mailto:misha@mate.academy\"\n                data-cy=\"CommentAuthor\"\n              >\n                Misha Hrynko\n              </a>\n\n              <button\n                data-cy=\"CommentDelete\"\n                type=\"button\"\n                className=\"delete is-small\"\n                aria-label=\"delete\"\n              >\n                delete button\n              </button>\n            </div>\n            <div\n              className=\"message-body\"\n              data-cy=\"CommentBody\"\n            >\n              One more comment\n            </div>\n          </article>\n\n          <article className=\"message is-small\" data-cy=\"Comment\">\n            <div className=\"message-header\">\n              <a\n                href=\"mailto:misha@mate.academy\"\n                data-cy=\"CommentAuthor\"\n              >\n                Misha Hrynko\n              </a>\n\n              <button\n                data-cy=\"CommentDelete\"\n                type=\"button\"\n                className=\"delete is-small\"\n                aria-label=\"delete\"\n              >\n                delete button\n              </button>\n            </div>\n\n            <div className=\"message-body\" data-cy=\"CommentBody\">\n              {'Multi\\nline\\ncomment'}\n            </div>\n          </article>\n\n          <button\n            data-cy=\"WriteCommentButton\"\n            type=\"button\"\n            className=\"button is-link\"\n          >\n            Write a comment\n          </button>\n        </div>\n\n        <NewCommentForm />\n      </div>\n    </div>\n  );\n};\n","import cn from 'classnames';\nimport React, {\n  Dispatch,\n  SetStateAction,\n  useState,\n} from 'react';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  setSelectedUser: Dispatch<SetStateAction<User | null>>\n  selectedUser: User | null;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  setSelectedUser,\n}) => {\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n\n  const handleSelectUser = (user: User) => {\n    setSelectedUser(user);\n    setDropdownOpen(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={cn('dropdown', {\n        'is-active': dropdownOpen,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setDropdownOpen(!dropdownOpen)}\n        >\n          <span>\n            {selectedUser\n              ? selectedUser.name\n              : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className=\"dropdown-item\"\n              onClick={() => handleSelectUser(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n\n        </div>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: unknown = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n\n      return response.json();\n    })\n    .catch(error => {\n      throw new Error(error.message);\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: unknown) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: unknown) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum ErrorType {\n  None,\n  PostsLoading,\n  OpeningPost,\n}\n","/* eslint-disable no-console */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getUsers } from './api/users';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { getPosts } from './api/posts';\nimport { ErrorType } from './types/ErrorType';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [error, setError] = useState(ErrorType.None);\n  const [isLoading, setLoading] = useState(false);\n  const [posts, setPosts] = useState<Post[]>([]);\n\n  useEffect(() => {\n    getUsers()\n      .then(response => setUsers(response));\n  }, []);\n\n  const loadPosts = async () => {\n    if (selectedUser) {\n      setLoading(true);\n      try {\n        const loadedPosts = await getPosts(selectedUser.id);\n\n        setPosts(loadedPosts);\n      } catch (err) {\n        setError(ErrorType.PostsLoading);\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  useEffect(() => {\n    loadPosts();\n  }, [selectedUser]);\n\n  const hasNoPosts = !posts.length\n  && selectedUser\n  && !error\n  && !isLoading;\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  setSelectedUser={setSelectedUser}\n                  selectedUser={selectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && <Loader />}\n\n                {hasNoPosts && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {error === ErrorType.PostsLoading && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {selectedUser && posts.length\n                  ? (\n                    <PostsList\n                      posts={posts}\n                    />\n                  ) : (null)}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              'Sidebar--open',\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              <PostDetails />\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = (limit = 10) => {\n  return client.get<User[]>(`/users?limit=${limit}`);\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}