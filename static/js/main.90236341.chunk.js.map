{"version":3,"sources":["types/ErrorType.ts","types/Loading.ts","components/PostsList.tsx","utils/fetchClient.ts","components/CommentsList.tsx","api/comments.ts","components/Loader/Loader.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","api/users.ts","api/posts.ts","index.tsx"],"names":["ErrorType","Loading","PostsList","posts","setSelectedPost","selectedPost","className","map","post","id","title","type","onClick","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","statusText","json","catch","error","message","client","CommentsList","comments","setComments","useState","hasDeletingError","setDeletingError","deletingId","setDeletingId","handleDelete","commentId","a","current","filter","comment","href","name","Loader","PostDetails","isLoading","hasNoComments","length","Comments","CommentsLoading","UserSelector","users","selectedUser","setSelectedUser","dropdownOpen","setDropdownOpen","cn","role","user","handleSelectUser","App","setUsers","None","setError","setLoading","setPosts","useEffect","getUsers","loadPosts","Posts","userId","loadedPosts","PostsLoading","loadComments","postId","loadedComments","hasNoPosts","classNames","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.90236341.chunk.js","sourcesContent":["export enum ErrorType {\n  None,\n  PostsLoading,\n  CommentsLoading,\n}\n","export enum Loading {\n  None,\n  Posts,\n  Comments,\n}\n","import React, { Dispatch, SetStateAction } from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  selectedPost: Post | null;\n  setSelectedPost: Dispatch<SetStateAction<Post | null>>\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  setSelectedPost,\n  selectedPost,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(post => (\n          <tr\n            key={post.id}\n            data-cy=\"Post\"\n          >\n            <td data-cy=\"PostId\">{post.id}</td>\n\n            <td data-cy=\"PostTitle\">\n              {post.title}\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              {selectedPost?.id === post.id ? (\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className=\"button is-link\"\n                  onClick={() => setSelectedPost(null)}\n                >\n                  Close\n                </button>\n              ) : (\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className=\"button is-link is-light\"\n                  onClick={() => setSelectedPost(post)}\n                >\n                  Open\n                </button>\n              )}\n\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: unknown = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n\n      return response.json();\n    })\n    .catch(error => {\n      throw new Error(error.message);\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: unknown) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: unknown) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { Dispatch, SetStateAction, useState } from 'react';\nimport { deleteComment } from '../api/comments';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  comments: Comment[];\n  setComments:Dispatch<SetStateAction<Comment[]>>\n};\n\nexport const CommentsList:React.FC<Props> = ({\n  comments,\n  setComments,\n}) => {\n  const [hasDeletingError, setDeletingError] = useState(false);\n  const [deletingId, setDeletingId] = useState(0);\n\n  const handleDelete = async (commentId: number) => {\n    try {\n      setDeletingId(commentId);\n      await deleteComment(commentId);\n\n      setComments(current => current.filter(\n        ({ id }) => id !== commentId,\n      ));\n    } catch {\n      setDeletingError(true);\n    }\n  };\n\n  return (\n    <>\n      <p className=\"title is-4\">Comments:</p>\n      {comments.map(comment => (\n        <article\n          key={comment.id}\n          className=\"message is-small\"\n          data-cy=\"Comment\"\n        >\n          <div className=\"message-header\">\n            <a href=\"mailto:misha@mate.academy\" data-cy=\"CommentAuthor\">\n              {comment.name}\n            </a>\n            <button\n              data-cy=\"CommentDelete\"\n              type=\"button\"\n              className=\"delete is-small\"\n              aria-label=\"delete\"\n              onClick={() => handleDelete(comment.id)}\n            >\n              delete button\n            </button>\n          </div>\n          <div className=\"message-body\" data-cy=\"CommentBody\">\n            {comment.body}\n          </div>\n\n          {hasDeletingError && deletingId === comment.id && (\n            <div\n              className=\"notification is-danger\"\n            >\n              Something went wrong!\n            </div>\n          )}\n        </article>\n      ))}\n    </>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { Dispatch, SetStateAction } from 'react';\nimport { Comment } from '../types/Comment';\nimport { ErrorType } from '../types/ErrorType';\nimport { Loading } from '../types/Loading';\nimport { Post } from '../types/Post';\nimport { CommentsList } from './CommentsList';\nimport { Loader } from './Loader';\n// import { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  selectedPost: Post | null;\n  error: ErrorType;\n  isLoading: Loading;\n  comments: Comment[];\n  setComments:Dispatch<SetStateAction<Comment[]>>\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  error,\n  isLoading,\n  comments,\n  setComments,\n}) => {\n  const hasNoComments = !comments.length\n  && selectedPost\n  && !error\n  && !isLoading;\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {selectedPost?.title}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading === Loading.Comments && (\n            <Loader />\n          )}\n\n          {error === ErrorType.CommentsLoading && (\n            <div\n              className=\"notification is-danger\"\n              data-cy=\"CommentsError\"\n            >\n              Something went wrong\n            </div>\n          )}\n\n          {hasNoComments && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          ) }\n\n          {selectedPost && comments.length > 0 && (\n            <CommentsList\n              comments={comments}\n              setComments={setComments}\n            />\n          )}\n\n          <button\n            data-cy=\"WriteCommentButton\"\n            type=\"button\"\n            className=\"button is-link\"\n          >\n            Write a comment\n          </button>\n        </div>\n\n        {/* <NewCommentForm /> */}\n      </div>\n    </div>\n  );\n};\n","import cn from 'classnames';\nimport React, {\n  Dispatch,\n  SetStateAction,\n  useState,\n} from 'react';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  setSelectedUser: Dispatch<SetStateAction<User | null>>\n  selectedUser: User | null;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  setSelectedUser,\n}) => {\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n\n  const handleSelectUser = (user: User) => {\n    setSelectedUser(user);\n    setDropdownOpen(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={cn('dropdown', {\n        'is-active': dropdownOpen,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setDropdownOpen(!dropdownOpen)}\n        >\n          <span>\n            {selectedUser\n              ? selectedUser.name\n              : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className=\"dropdown-item\"\n              onClick={() => handleSelectUser(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n\n        </div>\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable no-console */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getUsers } from './api/users';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { getPosts } from './api/posts';\nimport { ErrorType } from './types/ErrorType';\nimport { Loading } from './types/Loading';\nimport { Comment } from './types/Comment';\nimport { getComments } from './api/comments';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [error, setError] = useState(ErrorType.None);\n  const [isLoading, setLoading] = useState(Loading.None);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n\n  useEffect(() => {\n    getUsers()\n      .then(response => setUsers(response));\n  }, []);\n\n  const loadPosts = async () => {\n    if (selectedUser) {\n      setLoading(Loading.Posts);\n      try {\n        const loadedPosts = await getPosts(selectedUser.id);\n\n        setPosts(loadedPosts);\n      } catch (err) {\n        setError(ErrorType.PostsLoading);\n      } finally {\n        setLoading(Loading.None);\n      }\n    }\n  };\n\n  useEffect(() => {\n    loadPosts();\n  }, [selectedUser]);\n\n  const loadComments = async () => {\n    if (selectedPost) {\n      setLoading(Loading.Comments);\n      try {\n        const loadedComments = await getComments(selectedPost.id);\n\n        setComments(loadedComments);\n      } catch (err) {\n        setError(ErrorType.CommentsLoading);\n      } finally {\n        setLoading(Loading.None);\n      }\n    }\n  };\n\n  useEffect(() => {\n    loadComments();\n  }, [selectedPost]);\n\n  const hasNoPosts = !posts.length\n  && selectedUser\n  && !error\n  && !isLoading;\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  setSelectedUser={setSelectedUser}\n                  selectedUser={selectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading === Loading.Posts && <Loader />}\n\n                {hasNoPosts && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {error === ErrorType.PostsLoading && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {selectedUser && posts.length > 0 && (\n                  <PostsList\n                    posts={posts}\n                    setSelectedPost={setSelectedPost}\n                    selectedPost={selectedPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              <PostDetails\n                selectedPost={selectedPost}\n                error={error}\n                isLoading={isLoading}\n                comments={comments}\n                setComments={setComments}\n              />\n            </div>\n          </div>\n\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = (limit = 10) => {\n  return client.get<User[]>(`/users?limit=${limit}`);\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}